@startuml

class RunData{
year: string
only_HiTS_SN: bool
at_leftraru: bool
results_dir: string
index: int
n_params: int
this_par:
SN_table: string[][]
image_size: int[]
filter_type: string
resultccd: int
field:
SN_pos: float[]
ccd: int
SN_index: int
flux_thres:float
vel_flux_thres: float
MJD :float
NUO:
CandData:
SN_found: bool

void apply params()
void save_results(Observer, string)
void decide_second_run(Observer)
}

class FITSHandler {

field: int
ccd: int
year: string
SN_index: int
accum_neg_flux_depth: int
accum_neg_flux: int
accum_med_flux_depth: int
accum_median_flux: int
median_rejection
data_names: {}
base_image: float[][]
base_mask: int[][]
dil_base_mask: int [][]
diff: float[][]
flux: float[][]
var_flux: float[][]
psf: float [][]
science : float [][]
MJD : float

float get_data_names()
void naylor_photometry(float [][])
void load_fluxes(int)
}

class Observer{
figsize1: int
figsize2: int
num_obs
obs_rad
obs_diam
obj

void new_objects_from_CandData(int [][][])
void new_object(int, int, int [], int)
void rescue_run_data(int, FITSHandler, KalmanFilter, SNDetector)
void print_lightcurve()
float[][] stack_stamps()
void print_stamps()
void print_space_states()
void print_all_space_states()
}

class SNDetector{
n_conditions: int
n_consecutive_alerts: int
pixel_conditions: bool [][][]
pixel_flags: int [][]
accum_compliant_pixels: bool [][]
CandData:
flux_thres: float
vel_flux_thres: float
vel_satu: float
float subsampled_median(float[][], int)
void pixel_discrimination(int, FITSHandler, KalmanFilter)
void neighboring_pixels()
void filter_groups(FITSHandler, KalmanFilter)
void draw_complying_pixel_groups(int, FITSHandler, KalmanFilter)
void update_candidates(int)
void check_candidates(RunData)
}

class KalmanFilter{
num_states: int
num_cov_elements: int
time: float
state: float[][][]
state_cov: float [][][]
pred_state
pred_state_cov
sigma
std_factor
observation
kalman_gain
void update(float, FITSHandler)
void correct_with_measurements(float [][], float [][])
predict_at_new_time(float)
variable_accel_Q(float, float)
}


class MaximumCorrentropyKalmanFilter{
image_stats(float[][], float)
inv_gauss(float, float)
chol2(float[][])
void correct_with_measurments(float [][], float [][], float, int, bool, bool)
}


KalmanFilter <|-- MaximumCorrentropyKalmanFilter
RunData <... FITSHandler



@enduml